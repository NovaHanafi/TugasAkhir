# -*- coding: utf-8 -*-
"""Program Multiclass  SYN Flood and UDP Lag

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_cfKVsDN9ICmKg3ZPA7ZfCX_8jpe9Qe8
"""

from google.colab import drive
drive.mount('/content/drive')

pip install scikit-learn

import pandas as pd
df = pd.read_csv("drive/MyDrive/Dataset/DataProcess/SYNandUDPLagDataProcessing.csv")
df.info()
x=df.iloc[:,df.columns != 'Label']
y=df.iloc[:,-1]
print("x\n",x.info())
y = pd.DataFrame(y)
print('y\n',y.info())

df.describe()

normalized_df=(df-df.mean())/df.std()
normalized_df=normalized_df.drop(' Flow Packets/s',axis=1)
normalized_df=normalized_df.drop('Flow Bytes/s',axis=1)

import matplotlib.pyplot as plt
import seaborn as sn
plt.figure(figsize=(100,200))
cor = normalized_df.corr()
sn.heatmap(cor, annot=True, cmap=plt.cm.Reds)
plt.show()

normalized_df.head()

normalized_df=normalized_df.drop('Unnamed: 0', axis=1)
normalized_df=normalized_df.drop('Unnamed: 0.1.1', axis=1)

y=pd.DataFrame(y)

normalized_df.describe()

normalized_x=normalized_df.iloc[:,normalized_df.columns != 'Label']

normalized_x.describe()

from sklearn.model_selection import train_test_split
import numpy as np
X_train, X_test, y_train, y_test = train_test_split(normalized_x, y, test_size=0.25, random_state=00, )
y_train = np.array(y_train)
y_test =np.array(y_test)
print("TRAIN:", X_train.index)
print("TEST:", X_test.index)

normalized_x.info()

y.info()

from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler

from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier

from sklearn.ensemble import StackingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier

from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

kf = KFold(n_splits=10)
for train_index, test_index in kf.split(X_train, y_train):
    print("TRAIN:", train_index)
for train_index, test_index in kf.split(X_test, y_test):
    print("TEST:", test_index)

pipeline = make_pipeline(StandardScaler(), RandomForestClassifier(n_estimators=100, max_depth=10))

scorex = cross_val_score(pipeline, X=X_train, y=y_train, cv=10, n_jobs=1)
print('Cross Validation accuracy scores: %s' % scorex)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scorex),np.std(scorex)))

X_train = X_train.replace((np.inf, -np.inf, np.nan), 0).reset_index(drop=True)
X_test = X_test.replace((np.inf, -np.inf, np.nan), 0).reset_index(drop=True)

def get_stacking():
	level0 = list()
	level0.append(('lr', LogisticRegression()))
	level0.append(('cart', DecisionTreeClassifier()))
	level1 = LogisticRegression()
	model = StackingClassifier(estimators=level0, final_estimator=level1)
	return model

models = [RandomForestClassifier(),AdaBoostClassifier(),get_stacking()]
classifiers = ["RandomForest","AdaBoost","Stacking" ]
scores = []

"""Data train"""

for model in models:
    model.fit(X_train,y_train)
    y_pred = model.predict(X_train)
    score = accuracy_score(y_train, y_pred)*100
    scores.append(score)
    print("Accuracy of the model is: ", score)
    conf_matrix = confusion_matrix(y_train,y_pred)
    report = classification_report(y_train,y_pred)
    print("Confusion Matrix:\n",conf_matrix)
    print("Report:\n",report)
    print("\n==============***===============")

"""Data Test"""

for model in models:
    model.fit(X_test,y_test)
    y_pred = model.predict(X_test)
    score = accuracy_score(y_test, y_pred)*100
    scores.append(score)
    print("Accuracy of the model is: ", score)
    conf_matrix = confusion_matrix(y_test,y_pred)
    report = classification_report(y_test,y_pred)
    print("Confusion Matrix:\n",conf_matrix)
    print("Report:\n",report)
    print("\n==============***===============")

"""Data Train 75% + Data Test 25% """

for model in models:
    model.fit(X_train,y_train)
    y_pred = model.predict(X_test)
    score = accuracy_score(y_test, y_pred)*100
    scores.append(score)
    print("Accuracy of the model is: ", score)
    conf_matrix = confusion_matrix(y_test,y_pred)
    report = classification_report(y_test,y_pred)
    print("Confusion Matrix:\n",conf_matrix)
    print("Report:\n",report)
    print("\n==============***===============")

"""Data Train with k fold"""

kf = KFold(n_splits=10)
for train_index, test_index in kf.split(X_train, y_train):
    print("TRAIN:", train_index)

"""Data train with k fold and algorithm"""

from sklearn.model_selection import StratifiedKFold
from sklearn import linear_model

kf = StratifiedKFold(n_splits=10 , shuffle=True)

score = cross_val_score(RandomForestClassifier(), X_train, y_train, cv= kf, scoring="accuracy")
print(f'Scores for each fold are: {score}')
print(f'Average score: {"{:.2f}".format(score.mean())}')

from sklearn.model_selection import StratifiedKFold
from sklearn import linear_model

kf = StratifiedKFold(n_splits=10 , shuffle=True)

score = cross_val_score(AdaBoostClassifier(), X_train, y_train, cv= kf, scoring="accuracy")
print(f'Scores for each fold are: {score}')
print(f'Average score: {"{:.2f}".format(score.mean())}')

from sklearn.model_selection import StratifiedKFold
from sklearn import linear_model

kf = StratifiedKFold(n_splits=10 , shuffle=True)

score = cross_val_score(get_stacking(), X_train, y_train, cv= kf, scoring="accuracy")
print(f'Scores for each fold are: {score}')
print(f'Average score: {"{:.2f}".format(score.mean())}')

"""Data Test with k fold"""

kf = KFold(n_splits=10)
for train_index, test_index in kf.split(X_test, y_test):
    print("TEST:", test_index)

"""Data test with k fold and algorithm"""

from sklearn.model_selection import StratifiedKFold
from sklearn import linear_model

kf = StratifiedKFold(n_splits=10 , shuffle=True)

score = cross_val_score(RandomForestClassifier(), X_test, y_test, cv= kf, scoring="accuracy")
print(f'Scores for each fold are: {score}')
print(f'Average score: {"{:.2f}".format(score.mean())}')

from sklearn.model_selection import StratifiedKFold
from sklearn import linear_model

kf = StratifiedKFold(n_splits=10 , shuffle=True)

score = cross_val_score(AdaBoostClassifier(), X_test, y_test, cv= kf, scoring="accuracy")
print(f'Scores for each fold are: {score}')
print(f'Average score: {"{:.2f}".format(score.mean())}')

from sklearn.model_selection import StratifiedKFold
from sklearn import linear_model

kf = StratifiedKFold(n_splits=10 , shuffle=True)

score = cross_val_score(get_stacking(), X_test, y_test, cv= kf, scoring="accuracy")
print(f'Scores for each fold are: {score}')
print(f'Average score: {"{:.2f}".format(score.mean())}')

"""Tuning Data Train"""

def get_stackingcv():
	level0 = list()
	level0.append(('lr', LogisticRegression()))
	level0.append(('cart', DecisionTreeClassifier()))
	level1 = LogisticRegression()
	modelx = StackingClassifier(estimators=level0, final_estimator=level1, cv=10)
	return modelx

modelxx = [RandomForestClassifier(),AdaBoostClassifier(),get_stackingcv()]
classifiers = ["RandomForest","AdaBoost","Stacking" ]
scores = []

for modelx in modelxx:
    modelx.fit(X_train,y_train)
    y_pred = modelx.predict(X_train)
    score = accuracy_score(y_train, y_pred)*100
    scores.append(score)
    print("Accuracy of the model is: ", score)
    conf_matrix = confusion_matrix(y_train,y_pred)
    report = classification_report(y_train,y_pred)
    print("Confusion Matrix:\n",conf_matrix)
    print("Report:\n",report)
    print("\n==============***===============")

"""Tuning Data Test"""

def get_stackingcv():
	level0 = list()
	level0.append(('lr', LogisticRegression()))
	level0.append(('cart', DecisionTreeClassifier()))
	level1 = LogisticRegression()
	modelx = StackingClassifier(estimators=level0, final_estimator=level1, cv=10)
	return modelx

modelxx = [RandomForestClassifier(),AdaBoostClassifier(),get_stackingcv()]
classifiers = ["RandomForest","AdaBoost","Stacking" ]
scores = []

for modelx in modelxx:
    modelx.fit(X_test,y_test)
    y_pred = modelx.predict(X_test)
    score = accuracy_score(y_test, y_pred)*100
    scores.append(score)
    print("Accuracy of the model is: ", score)
    conf_matrix = confusion_matrix(y_test,y_pred)
    report = classification_report(y_test,y_pred)
    print("Confusion Matrix:\n",conf_matrix)
    print("Report:\n",report)
    print("\n==============***===============")

"""Tuning Data Train 75% + Data Test 25%"""

for modelx in modelxx:
    modelx.fit(X_train,y_train)
    y_pred = modelx.predict(X_test)
    score = accuracy_score(y_test, y_pred)*100
    scores.append(score)
    print("Accuracy of the model is: ", score)
    conf_matrix = confusion_matrix(y_test,y_pred)
    report = classification_report(y_test,y_pred)
    print("Confusion Matrix:\n",conf_matrix)
    print("Report:\n",report)
    print("\n==============***===============")